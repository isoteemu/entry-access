<!DOCTYPE html>
<html lang="en" class="h-full bg-gray-50  dark:bg-gray-900">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login - Door Entry System</title>

    <link href="/dist/assets/css/output.css" rel="stylesheet">
    <link href="/assets/css/jyu.css" rel="stylesheet">

    <!-- Prefetch Error QR -->
    <link rel="prefetch" href="/dist/assets/support_qr.png" as="image">
    <link rel="prefetch" href="/config.json" as="fetch">

</head>
<body class="h-full">
    <div class="flex min-h-full flex-col justify-center py-12 sm:px-6 lg:px-8">
        <div class="sm:mx-auto sm:w-full sm:max-w-md">
            <!-- Logo/Header -->
            <div class="flex items-center gap-4 mb-2">
                <div class="h-12 w-12 flex items-center justify-center bg-blue-600 dark:bg-blue-500 rounded-lg">
                    <svg class="h-8 w-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
                    </svg>
                </div>
                <h2 class="text-3xl font-bold tracking-tight text-gray-900 dark:text-white flex-1 text-center">
                    Identify with email
                </h2>
            </div>
            <p class="mt-2 text-center text-sm text-gray-600 dark:text-gray-400">
                To access the premises, please enter your student email address. A login link will be sent to your email.
            </p>
        </div>

        <div class="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
            <div class="bg-white dark:bg-gray-800 px-4 py-8 shadow sm:rounded-lg sm:px-10">
                <!-- Step indicator -->
                <div class="flex items-center mb-6">
                    <div class="flex items-center justify-center h-8 w-8 rounded-full bg-blue-600 text-white font-bold mr-3">
                        1
                    </div>
                    <h3 class="text-base font-medium text-gray-900 dark:text-white">Enter your student email</h3>
                </div>
                <form class="space-y-6" action="" method="POST" id="email-form">
                    <div>
                        <label for="email" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                            Email address
                        </label>
                        <div class="mt-1">
                            <input 
                                id="email" 
                                name="email" 
                                type="email"
                                autocomplete="email" 
                                required
                                class="block w-full appearance-none rounded-md border border-gray-300 dark:border-gray-600 px-3 py-2 placeholder-gray-400 dark:placeholder-gray-500 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500 dark:bg-gray-700 dark:text-white sm:text-sm"
                                placeholder="Enter your email"
                            >
                        </div>
                    </div>

                    <div>
                        <button 
                            type="submit" 
                            class="flex w-full justify-center rounded-md border border-transparent bg-blue-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                        >
                            Send login link
                        </button>
                    </div>
                    <input type="hidden" name="redirect" value="{{.Redirect}}">
                    <input type="hidden" name="timezone" id="timezone" value="">
                </form>

                <!-- Email Status messages -->
                <div id="message" class="mt-4 hidden">
                    <div class="rounded-md bg-green-50 dark:bg-green-900/20 p-4">
                        <div class="flex">
                            <div class="flex-shrink-0">
                                <svg class="h-5 w-5 text-green-400" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                                </svg>
                            </div>
                            <div class="ml-3">
                                <p class="text-sm font-medium text-green-800 dark:text-green-200">
                                    Check your email for a login link. If you don't see it, please check your spam folder. The link will expire in {{.LinkTTL}} minutes.
                                </p>
                            </div>
                        </div>
                    </div>
                </div>

                <div id="otp-container" class="{{ if not .OTPClaim}}hidden{{end}} mt-6">
                    <div id="hr" class="mt-6 border-t border-gray-200 dark:border-gray-700"></div>
                    <a name="OTP" class="hidden">OTP Verification</a>
                    <div class="flex items-center mt-6 mb-4">
                        <div class="flex items-center justify-center h-8 w-8 rounded-full bg-blue-600 text-white font-bold mr-3">
                            2
                        </div>
                        <h3 class="text-base font-medium text-gray-900 dark:text-white">Check your email</h3>
                    </div>
                    <p class="text-sm text-gray-600 dark:text-gray-400">
                        You can click the login link sent to your email and ignore this page, or you can fill out here the authentication code included in the email.
                    </p>
                    <form class="mt-4 flex flex-col items-center" action="verify" method="POST" autocomplete="off" id="otp-form">
                        <label for="otp" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                            Enter 6-digit code
                        </label>
                        <div class="mt-1">
                            <input
                                id="otp"
                                name="otp"
                                type="text"
                                inputmode="numeric"
                                pattern="[0-9]{6}"
                                maxlength="6"
                                minlength="6"
                                required
                                class="block w-40 text-center appearance-none rounded-md border border-gray-300 dark:border-gray-600 px-3 py-2 placeholder-gray-400 dark:placeholder-gray-500 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-blue-500 dark:bg-gray-700 dark:text-white sm:text-sm tracking-widest"
                                placeholder="_ _ _ _ _ _"
                            >
                        </div>

                        <button
                            type="submit"
                            class="mt-3 flex w-40 justify-center rounded-md border border-transparent bg-blue-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-800 disabled:opacity-50 disabled:cursor-not-allowed transition-colors">
                            Verify and proceed
                        </button>

                        <input type="hidden" name="otpclaim" value="{{.OTPClaim}}">
                    </form>
                </div>

            </div>
        </div>
    </div>



    <script>

    // Setup EventSource for server-sent events (if needed)
    const url = new URL('verify', window.location);
    const eventSource = new EventSource(url);

    // 2. Event listener for incoming messages
    // SSE messages that start with 'data: ' are received here
    eventSource.onmessage = function(event) {
        try {
            // Parse the JSON string sent by the server
            const data = JSON.parse(event.data);
            
            // TODO: Parse error

            console.log("EventSource message received:", data);

            if (data.status === 'authenticated') {
                statusDisplay.style.color = 'green';
                
                eventSource.close();
                console.log('SSE connection closed by client.');
            } else if (data.status === 'pending') {
                statusDisplay.style.color = 'orange';
            }

        } catch (e) {
            console.error('Error parsing JSON:', e, 'Raw data:', event.data);
        }
    };

    // Optional: Event listener for when the connection is opened
    eventSource.onopen = function() {
        console.log('SSE connection established.');
    };

    // Optional: Event listener for errors (including connection failure/reconnect attempts)
    eventSource.onerror = function(err) {
        console.error('EventSource failed:', err);
        // EventSource automatically attempts to reconnect, so no need to manually handle that here.
    };


    // Helper function to perform fetch with timeout
    function postData(url = '', data = {}, options = {}) {
        const controller = new AbortController();

        const defaultOptions = {
            timeout: 4_000,
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: new URLSearchParams(data),
            signal: controller.signal,
        };

        options = { ...defaultOptions, ...options };

        if (options.timeout > 0) {
            setTimeout(() => controller.abort(), options.timeout);
        }

        return fetch(url, options)
            .catch(error => {
                if (error.name === 'AbortError') {
                    throw new Error('Request timed out');
                }
                throw error;
            });
    }

    function formDataToObject(formElement) {
        const formData = new FormData(formElement);
        const data = {};
        formData.forEach((value, key) => {
            data[key] = value;
        });
        return data;
    }

    // Utility functions
    const FormUtils = {
        setError(inputElement, message) {
            inputElement.setCustomValidity(message);
            inputElement.reportValidity();
        },

        clearError(inputElement) {
            inputElement.setCustomValidity('');
        },

        /**
         * Parse error response and return user-friendly message.
         * Handles specific status codes like 429 and 500 with custom messages.
         * Attempts to extract error message from JSON response if available.
         */
        async parseErrorResponse(response) {
            const contentType = response.headers.get('content-type') || '';
            let customMessage = null;

            // First try to parse JSON error message if available
            if (contentType.includes('application/json')) {
                try {
                    const data = await response.json();
                    if (data?.error) {
                        customMessage = data.error;
                    }
                } catch (error) {
                    // Fall through to status-based handling
                    console.warn("Failed to parse JSON error response", error);
                }
            }

            // Handle specific status codes with custom message or fallback
            if (response.status === 429) {
                return customMessage || 'Too many requests. Please wait before trying again.';
            } else if (response.status === 500) {
                let statusMessage = customMessage || 'Server error occurred.';

                // Try to get support URL from config
                try {
                    const configResponse = await fetch('/config.json');
                    const config = await configResponse.json();
                    if (config?.SupportURL) {
                        return `${statusMessage} Please contact support at <a href="${config.SupportURL}" target="_blank">${config.SupportURL}</a>.`;
                    }
                } catch (error) {
                    // Config fetch failed, use generic message
                    console.warn("Failed to fetch config for support URL", error);
                }

                return `${statusMessage} Please try again later or contact support.`;
            }

            return customMessage;
        },

        startCooldown(button, seconds = 45, finalText = 'Resend email') {
            let countdown = seconds;
            button.disabled = true;
            
            const interval = setInterval(() => {
                button.textContent = `Wait ${countdown--}s...`;
                if (countdown <= 0) {
                    clearInterval(interval);
                    button.disabled = false;
                    button.textContent = finalText;
                }
            }, 1000);
        }
    };

    // Run in anonymous async function
    (async () => {
        // DOM elements
        const emailForm = document.getElementById('email-form');
        const otpForm = document.getElementById('otp-form');
        const emailInput = document.getElementById('email');
        const otpInput = document.getElementById('otp');
        const messageDiv = document.getElementById('message');
        const otpDiv = document.getElementById('otp-container');

        // Set timezone
        const timezoneInput = document.getElementById('timezone');
        if (timezoneInput) {
            const timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;
            if (timeZone) {
                timezoneInput.value = timeZone;
            }
        }

        // Clear validation errors on input
        emailInput.addEventListener('input', () => FormUtils.clearError(emailInput));
        otpInput.addEventListener('input', () => FormUtils.clearError(otpInput));

        // Handle email form submission
        emailForm.addEventListener('submit', async function(e) {
            e.preventDefault();

            const button = this.querySelector('button[type="submit"]');
            const buttonText = button.textContent;

            // Clear previous state
            FormUtils.clearError(emailInput);
            messageDiv.classList.add('hidden');

            // Disable button and show loading state
            button.textContent = 'Sending...';
            button.disabled = true;

            try {
                let formData = formDataToObject(emailForm);
                const response = await postData(this.action, formData);
                if (response.ok) {
                    // Success
                    messageDiv.classList.remove('hidden');
                    otpDiv.classList.remove('hidden');
                    FormUtils.startCooldown(button);

                    const data = await response.json();
                    console.log("Response data:", data);
                    if (data?.otpclaim) {
                        otpForm.querySelector('input[name="otpclaim"]').value = data.otpclaim;
                        otpInput.focus();
                    } else {
                        throw new Error("No otpclaim received");
                    }

                    // Update URL hash without scrolling
                    // history.replaceState(null, '', '#OTP');
                    window.location.hash = 'OTP';
                } else {
                    // Handle error response
                    const errorMsg = await FormUtils.parseErrorResponse(response) || 'Failed to send login link. Please try again.';
                    FormUtils.setError(emailInput, errorMsg);
                    button.textContent = buttonText;
                    button.disabled = false;
                }
            } catch (error) {
                const errorMessage = error.message || 'Failed to send login link. Please try again.';
                console.error("Error:", error);
                button.textContent = buttonText;
                button.disabled = false;
            }
        });

        // OTP form handler
        otpForm.addEventListener('submit', async function(e) {
            e.preventDefault();

            const button = this.querySelector('button[type="submit"]');
            const otp = otpInput.value;
            
            // Clear previous state
            FormUtils.clearError(otpInput);
            button.disabled = true;
            button.textContent = 'Verifying...';

            try {
                const data = formDataToObject(this);

                const response = await postData(this.action, data);

                if (response.ok) {
                    const responseData = await response.json();
                    if (responseData?.redirect) {
                        window.location.href = responseData.redirect;
                    } else {
                        throw new Error("No redirect URL received");
                    }
                } else {
                    // Parse and show error via validation
                    const customError = await FormUtils.parseErrorResponse(response) || 
                        'Failed to verify OTP. Please try again.';
                    
                    FormUtils.setError(otpInput, customError);
                    button.disabled = false;
                    button.textContent = 'Verify and proceed';
                }
            } catch (error) {
                const errorMessage = error.message || 'Failed to verify OTP. Please try again.';
                FormUtils.setError(otpInput, errorMessage);
                button.disabled = false;
                button.textContent = 'Verify and proceed';
            }
        });

        // Handle page load focus
        document.addEventListener('DOMContentLoaded', function() {
            if (location.hash === '#OTP') {
                otpForm.classList.remove('hidden');
                otpInput.focus();
            } else {
                emailInput.focus();
            }
        });
    })();

    </script>
</body>
</html>